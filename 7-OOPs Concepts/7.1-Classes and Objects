Classes and Objects
Object-Oriented Programming (OOP) is a programming paradigm that uses "objects" to design applications and computer programs. OOP allows for modeling real-world scenarios using classes and objects. This lesson covers the basics of creating classes and objects, including instance variables and methods.

### A class is a blue print for creating objects. Attributes,methods
class Car:
    pass

audi=Car()
bmw=Car()

print(type(audi))
<class '__main__.Car'>
print(audi)
print(bmw)
<__main__.Car object at 0x0000015A0B79FF20>
<__main__.Car object at 0x0000015A0A3374A0>
audi.windows=4

print(audi.windows)
4
tata=Car()
tata.doors=4
print(tata.windows)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Cell In[5], line 3
      1 tata=Car()
      2 tata.doors=4
----> 3 print(tata.windows)

AttributeError: 'Car' object has no attribute 'windows'
dir(tata)
['__class__',
 '__delattr__',
 '__dict__',
 '__dir__',
 '__doc__',
 '__eq__',
 '__format__',
 '__ge__',
 '__getattribute__',
 '__getstate__',
 '__gt__',
 '__hash__',
 '__init__',
 '__init_subclass__',
 '__le__',
 '__lt__',
 '__module__',
 '__ne__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 '__weakref__',
 'doors']
### Instance Variable and Methods
class Dog:
    ## constructor
    def __init__(self,name,age):
        self.name=name
        self.age=age

## create objects
dog1=Dog("Buddy",3)
print(dog1)
print(dog1.name)
print(dog1.age)
    
    
<__main__.Dog object at 0x0000015A0B7E99D0>
Buddy
3
dog2=Dog("Lucy",4)
print(dog2.name)
print(dog2.age)
Lucy
4
## Define a class with instance methods
class Dog:
    def __init__(self,name,age):
        self.name=name
        self.age=age
    
    def bark(self):
        print(f"{self.name} says woof")


dog1=Dog("Buddy",3)
dog1.bark()
dog2=Dog("Lucy",4)
dog2.bark()
Buddy says woof
Lucy says woof
### Modeling a Bank Account

## Define a class for bank account
class BankAccount:
    def __init__(self,owner,balance=0):
        self.owner=owner
        self.balance=balance

    def deposit(self,amount):
        self.balance+=amount
        print(f"{amount} is deposited. New balance is {self.balance}")

    def withdraw(self,amount):
        if amount>self.balance:
            print("Insufficient funds!")
        else:
            self.balance-=amount
            print(f"{amount} is withdrawn. New Balance is {self.balance}")

    def get_balance(self):
        return self.balance
    
## create an account

account=BankAccount("Krish",5000)
print(account.balance)

    
5000
## Call isntance methods
account.deposit(100)
100 is deposited. New balance is 5100
account.withdraw(300)
300 is withdrawn. New Balance is 4800
print(account.get_balance())
4800
Conclusion
Object-Oriented Programming (OOP) allows you to model real-world scenarios using classes and objects. In this lesson, you learned how to create classes and objects, define instance variables and methods, and use them to perform various operations. Understanding these concepts is fundamental to writing effective and maintainable Python code.

 
 
 
