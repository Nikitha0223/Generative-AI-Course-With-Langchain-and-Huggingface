Encapsulation And Abstraction
Encapsulation and abstraction are two fundamental principles of Object-Oriented Programming (OOP) that help in designing robust, maintainable, and reusable code. Encapsulation involves bundling data and methods that operate on the data within a single unit, while abstraction involves hiding complex implementation details and exposing only the necessary features.

Encapsulation
Encapsulation is the concept of wrapping data (variables) and methods (functions) together as a single unit. It restricts direct access to some of the object's components, which is a means of preventing accidental interference and misuse of the data.

### Encapsulation  with Getter and Setter MEthods
### Public,protected,private variables or access modifiers

class Person:
    def __init__(self,name,age):
        self.name=name    ## public variables
        self.age=age      ## public variables

def get_name(person):
    return person.name

person=Person("Krish",34)
get_name(person)
'Krish'
dir(person)
['__class__',
 '__delattr__',
 '__dict__',
 '__dir__',
 '__doc__',
 '__eq__',
 '__format__',
 '__ge__',
 '__getattribute__',
 '__getstate__',
 '__gt__',
 '__hash__',
 '__init__',
 '__init_subclass__',
 '__le__',
 '__lt__',
 '__module__',
 '__ne__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 '__weakref__',
 'age',
 'name']
class Person:
    def __init__(self,name,age,gender):
        self.__name=name    ## private variables
        self.__age=age      ## private variables
        self.gender=gender

def get_name(person):
    return person.__name

person=Person("Krish",34,"Male")
get_name(person)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Cell In[15], line 11
      8     return person.__name
     10 person=Person("Krish",34,"Male")
---> 11 get_name(person)

Cell In[15], line 8, in get_name(person)
      7 def get_name(person):
----> 8     return person.__name

AttributeError: 'Person' object has no attribute '__name'
dir(person)
['_Person__age',
 '_Person__name',
 '__class__',
 '__delattr__',
 '__dict__',
 '__dir__',
 '__doc__',
 '__eq__',
 '__format__',
 '__ge__',
 '__getattribute__',
 '__getstate__',
 '__gt__',
 '__hash__',
 '__init__',
 '__init_subclass__',
 '__le__',
 '__lt__',
 '__module__',
 '__ne__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 '__weakref__',
 'gender']
class Person:
    def __init__(self,name,age,gender):
        self._name=name    ## protected variables
        self._age=age      ## protected variables
        self.gender=gender

class Employee(Person):
    def __init__(self,name,age,gender):
        super().__init__(name,age,gender)


employee=Employee("KRish",34,"Male")
print(employee._name)
KRish
## Encapsulation With Getter And Setter
class Person:
    def __init__(self,name,age):
        self.__name=name  ## Private access modifier or variable
        self.__age=age ## Private variable

    ## getter method for name
    def get_name(self):
        return self.__name
    
    ## setter method for name
    def set_name(self,name):
        self.__name=name

    # Getter method for age
    def get_age(self):
        return self.__age
    
    # Setter method for age
    def set_age(self, age):
        if age > 0:
            self.__age = age
        else:
            print("Age cannot be negative.")


person=Person("Krish",34)

## Access and modify private variables using getter and setter

print(person.get_name())
print(person.get_age())

person.set_age(35)
print(person.get_age())

person.set_age(-5)
    
Krish
34
35
Age cannot be negative.
 
 

Abstraction
Abstraction is the concept of hiding the complex implementation details and showing only the necessary features of an object. This helps in reducing programming complexity and effort.

from abc import ABC,abstractmethod

## Abstract base cclass
class Vehicle(ABC):
    def drive(self):
        print("The vehicle is used for driving")

    @abstractmethod
    def start_engine(self):
        pass

class Car(Vehicle):
    def start_engine(self):
        print("Car enginer started")

def operate_vehicle(vehicle):
    vehicle.start_engine()
    vehicle.drive()

car=Car()
operate_vehicle(car)
Car enginer started
The vehicle is used for driving
  
 
 
