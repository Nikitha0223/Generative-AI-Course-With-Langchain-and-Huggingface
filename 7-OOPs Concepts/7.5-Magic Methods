Magic Methods
Magic methods in Python, also known as dunder methods (double underscore methods), are special methods that start and end with double underscores. These methods enable you to define the behavior of objects for built-in operations, such as arithmetic operations, comparisons, and more.

Magic Methods
Magic methods are predefined methods in Python that you can override to change the behavior of your objects. Some common magic methods include:

'''
__init__': Initializes a new instance of a class.
__str__: Returns a string representation of an object.
__repr__: Returns an official string representation of an object.
__len__: Returns the length of an object.
__getitem__: Gets an item from a container.
__setitem__: Sets an item in a container.
'''
"\n__init__': Initializes a new instance of a class.\n__str__: Returns a string representation of an object.\n__repr__: Returns an official string representation of an object.\n__len__: Returns the length of an object.\n__getitem__: Gets an item from a container.\n__setitem__: Sets an item in a container.\n"
class Person:
    pass

person=Person()
dir(person)
['__class__',
 '__delattr__',
 '__dict__',
 '__dir__',
 '__doc__',
 '__eq__',
 '__format__',
 '__ge__',
 '__getattribute__',
 '__getstate__',
 '__gt__',
 '__hash__',
 '__init__',
 '__init_subclass__',
 '__le__',
 '__lt__',
 '__module__',
 '__ne__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 '__weakref__']
print(person)
<__main__.Person object at 0x0000029E5D059940>
## Basics MEthods
class Person:
    def __init__(self,name,age):
        self.name=name
        self.age=age
person=Person("KRish",34)
print(person)
<__main__.Person object at 0x0000029E5D31D4C0>
## Basics MEthods
class Person:
    def __init__(self,name,age):
        self.name=name
        self.age=age
    
    def __str__(self):
        return f"{self.name},{self.age} years old"
    
    def __repr__(self):
        return f"Person(name={self.name},age={self.age})"
    
person=Person("KRish",34)
print(person)
print(repr(person))
KRish,34 years old
Person(name=KRish,age=34)
 
