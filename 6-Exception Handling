#Exception Handling
try:
    n=int(input())
    a=int(input())
    if a%2==0:
        print(a/n)
    else:
        print(a*n)
except ZeroDivisionError as ex:
    print(ex)
except Exception as ex1:
    print(ex1)
finally:
    a+=n
    print(f"Code is excuted Successfully! and the result is {a}")
#Output:
2
0
0.0
Code is excuted Successfully! and the result is 2

Understanding Exceptions
Exception handling in Python allows you to handle errors gracefully and take corrective actions without stopping the execution of the program. This lesson will cover the basics of exceptions, including how to use try, except, else, and finally blocks.

What Are Exceptions?
Exceptions are events that disrupt the normal flow of a program. They occur when an error is encountered during program execution. Common exceptions include:

ZeroDivisionError: Dividing by zero.
FileNotFoundError: File not found.
ValueError: Invalid value.
TypeError: Invalid type.
## Exception try ,except block

try:
    a=b
except:
    print("The variable has not been assigned")
The variable has not been assigned
a=b
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In[4], line 1
----> 1 a=b

NameError: name 'b' is not defined
try:
    a=b
except NameError as ex:
    print(ex)
name 'b' is not defined
try:
    result=1/0
except ZeroDivisionError as ex:
    print(ex)
    print("Please enter the denominator greater than 0")
division by zero
Please enter the denominator greater than 0
try:
    result=1/2
    a=b
except ZeroDivisionError as ex:
    print(ex)
    print("Please enter the denominator greater than 0")
except Exception as ex1:
    print(ex1)
    print('Main exception got caught here')
name 'b' is not defined
Main exception got caught here
try:
    num=int(input("Enter a number"))
    result=10/num
except ValueError:
    print("This is not a valid number")
except ZeroDivisionError:
    print("enter denominator greater than 0")
except Exception as ex:
    print(ex)
## try,except,else block
try:
    num=int(input("Enter a number:"))
    result=10/num
except ValueError:
    print("That's not a valid number!")
except ZeroDivisionError:
    print("You can't divide by zero!")
except Exception as ex:
    print(ex)
else:
    print(f"the result is {result}")

    
You can't divide by zero!
## try,except,else and finally
try:
    num = int(input("Enter a number: "))
    result = 10 / num
except ValueError:
    print("That's not a valid number!")
except ZeroDivisionError:
    print("You can't divide by zero!")
except Exception as ex:
    print(ex)
else:
    print(f"The result is {result}")
finally:
    print("Execution complete.")
You can't divide by zero!
Execution complete.
### File handling and Exception HAndling

try:
    file=open('example1.txt','r')
    content=file.read()
    a=b
    print(content)

except FileNotFoundError:
    print("The file does not exists")
except Exception as ex:
    print(ex)

finally:
    if 'file' in locals() or not file.closed():
        file.close()
        print('file close')
name 'b' is not defined
file close
if 'file' in locals():
    print(True)
True
not file.closed()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In[24], line 1
----> 1 not file.closed()

TypeError: 'bool' object is not callable

 
